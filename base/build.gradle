apply from: "${rootProject.rootDir}/common_config_parameter.gradle"
apply plugin: 'com.android.library'
apply plugin: 'org.greenrobot.greendao' // apply plugin


android {
    compileSdkVersion project.ext.compileSdkVersion
    buildToolsVersion project.ext.buildToolVersion
    resourcePrefix "${project.name}_"
    defaultConfig {
        minSdkVersion project.ext.minSdkVersion
        targetSdkVersion project.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a"
        }

//        externalNativeBuild {
//            cmake {
//                cppFlags ""
//            }
//        }

        javaCompileOptions {
            annotationProcessorOptions {
                // 设置Room升级版本的历史记录位置
                // 设置ARouter的module的name
                arguments = ["room.schemaLocation": "$projectDir/schemes".toString(),
                             AROUTER_MODULE_NAME  : project.getName()]
            }
        }

        // 会将混淆文件打包入aar中，库混淆时会自动使用
        // 只针对aar
        // 全局混淆放置在app中
        consumerProguardFiles 'proguard-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

//    dataBinding {
//        enabled = true
//    }

//    externalNativeBuild {
//        cmake {
//            path "CMakeLists.txt"
//            version "3.10.2"
//        }
//    }

    compileOptions {
        sourceCompatibility project.ext.sourceCompatibility
        targetCompatibility project.ext.targetCompatibility
    }

    android {
        lintOptions {
            abortOnError false
        }
    }
}


// 注意compile和implementation区别，前者依赖可以跨模块传递，后者不可以(所以子项目和主项目都会依赖base)
dependencies {
    implementation fileTree(include: ['*.jar', '*.aar'], dir: 'libs')
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    // androidx
    implementation project.ext.androidxCommpat
    implementation project.ext.androidxConstraintlayout
    // localBroadcastManager
    implementation project.ext.localbroadcastManager
    // rxJava ,rxAndroid
    implementation project.ext.rxjava
    implementation project.ext.rxAndroid
    // eventBus
    implementation project.ext.eventBus
    // ARouter
    implementation project.ext.arouter
    // 每个模块的dependencies需要此引用，不然无法在apt中生成索引，同时要添加javaCompileOptions的内容
    annotationProcessor project.ext.arouter_annotationProcessor
    // jOOR
    implementation project.ext.joor
    // greenDao
    implementation project.ext.greenDao // add library

    implementation project(":module_api")
    // 使用github上的maven包
//    implementation 'com.coodev.module_api:api:1.0.0'
}

task clearJar(type: Delete) {
    delete "libs/${project.name}.jar"
}

task makeJar(type: Jar) {
    //指定生成jar名
    baseName project.name
    // 从哪儿打包class文件
    from "${buildDir}/intermediates/javac/debug/classes/"
    // 打包到jar后的目录结构
    into "${buildDir}/outputs/"
    // 去掉不需要打包的目录和文件
    exclude('test/', 'BuildConfig.class', 'R.class')
    // 去掉R开头的文件
    exclude {
        it.name.startsWith('R')
    }
}

makeJar.dependsOn(clearJar,build)